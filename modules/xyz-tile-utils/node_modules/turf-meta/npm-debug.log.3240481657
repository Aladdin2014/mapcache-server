0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/5.11.0/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--tag',
1 verbose cli   'lerna-temp' ]
2 info using npm@3.8.6
3 info using node@v5.11.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/tmcw/src/turf/packages/turf-meta',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package.tgz not in flight; packing
9 verbose correctMkdir /Users/tmcw/.npm correctMkdir not in flight; initializing
10 info lifecycle turf-meta@3.0.0-canary.2f5f7167~prepublish: turf-meta@3.0.0-canary.2f5f7167
11 silly lifecycle turf-meta@3.0.0-canary.2f5f7167~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package.tgz',
12 verbose tar pack   '/Users/tmcw/src/turf/packages/turf-meta' ]
13 verbose tarball /Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package.tgz
14 verbose folder /Users/tmcw/src/turf/packages/turf-meta
15 verbose addLocalTarball adding from inside cache /Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package.tgz
16 verbose correctMkdir /Users/tmcw/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd turf-meta@3.0.0-canary.2f5f7167
18 verbose afterAdd /Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package/package.json not in flight; writing
19 verbose correctMkdir /Users/tmcw/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package/package.json written
21 silly publish { name: 'turf-meta',
21 silly publish   version: '3.0.0-canary.2f5f7167',
21 silly publish   description: 'meta and functional programming helpers for turf modules',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'tape test.js' },
21 silly publish   keywords: [ 'functional', 'programming', 'turfjs' ],
21 silly publish   author: { name: 'Tom MacWright' },
21 silly publish   license: 'ISC',
21 silly publish   devDependencies: { tape: '^3.4.0', 'turf-random': '^3.0.0-canary.2f5f7167' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+ssh://git@github.com/Turfjs/turf-meta.git' },
21 silly publish   readme: '# turf-meta\n\n[![build status](https://secure.travis-ci.org/Turfjs/turf-meta.png)](http://travis-ci.org/Turfjs/turf-meta)\n\nFunctional helpers for Turf modules.\n\n**Why?** Because many turf modules have a similar pattern of running some operation\nover every coordinate or property object, etc. This module unifies those patterns\ninto one structure and make sure that turf is able to handle unusual structures\n(geometry roots, null geometries, geometrycollections, and so on). It\'s also\nquite fast - it uses monomorphic functions as much as possible and avoids copying\ndata unnecessarily.\n\n## coordEach(layer, callback)\n\nLazily iterate over coordinates in any GeoJSON object, similar to Array.forEach.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (value)\n\n```js\nvar point = { type: \'Point\', coordinates: [0, 0] };\ncoordEach(point, function(coords) {\n  // coords is equal to [0, 0]\n});\n```\n\n## coordReduce(layer, callback, memo)\n\nLazily reduce coordinates in any GeoJSON object into a single value, similar to how Array.reduce works. However, in this case we lazily runthe reduction, so an array of all coordinates is unnecessary.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (memo, value) and returns a new memo\n* `memo` (``): the starting value of memo: can be any type.\n\n## propEach(layer, callback)\n\nLazily iterate over property objects in any GeoJSON object, similar to Array.forEach.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (value)\n\n```js\nvar point = { type: \'Feature\', geometry: null, properties: { foo: 1 } };\npropEach(point, function(props) {\n  // props is equal to { foo: 1}\n});\n```\n\n\n## propReduce(layer, callback, memo)\n\nLazily reduce properties in any GeoJSON object into a single value, similar to how Array.reduce works. However, in this case we lazily runthe reduction, so an array of all properties is unnecessary.\n\n* `layer` (`Object`): any GeoJSON object\n* `callback` (`Function`): a method that takes (memo, coord) and returns a new memo\n* `memo` (``): the starting value of memo: can be any type.\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   bugs: { url: 'https://github.com/Turfjs/turf-meta/issues' },
21 silly publish   homepage: 'https://github.com/Turfjs/turf-meta#readme',
21 silly publish   _id: 'turf-meta@3.0.0-canary.2f5f7167',
21 silly publish   _shasum: '1ffa364c8134a868b1f586d84f22e46cc8c47048',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name turf-meta
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'turf-meta',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'turf-meta',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/turf-meta
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/tmcw/.npm/turf-meta/3.0.0-canary.2f5f7167/package.tgz
30 verbose request uri https://registry.npmjs.org/turf-meta
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 4:07:31 PM
33 verbose request using bearer token for auth
34 verbose request id f99b47809d4a8c73
35 http request PUT https://registry.npmjs.org/turf-meta
36 http 200 https://registry.npmjs.org/turf-meta
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'content-encoding': 'gzip',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'transfer-encoding': 'chunked',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Mon, 16 May 2016 20:07:35 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-atl6236-ATL',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1463429251.923782,VS0,VE3261',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/tmcw/.npm/registry.npmjs.org/turf-meta on PUT
39 info lifecycle turf-meta@3.0.0-canary.2f5f7167~publish: turf-meta@3.0.0-canary.2f5f7167
40 verbose stack Error: write EPIPE
40 verbose stack     at exports._errnoException (util.js:893:11)
40 verbose stack     at WriteWrap.afterWrite (net.js:783:14)
41 verbose cwd /Users/tmcw/src/turf/packages/turf-meta
42 error Darwin 15.4.0
43 error argv "/usr/local/Cellar/node/5.11.0/bin/node" "/usr/local/bin/npm" "publish" "--tag" "lerna-temp"
44 error node v5.11.0
45 error npm  v3.8.6
46 error code EPIPE
47 error errno EPIPE
48 error syscall write
49 error write EPIPE
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
