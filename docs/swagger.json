{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "mapcache",
        "description": "mapcache API",
        "contact": {
            "name": "Benjamin Tuttle",
            "email": "benjamin.t.tuttle@nga.mil"
        },
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        }
    },
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/api/login": {
            "post": {
                "description": "login",
                "operationId": "login",
                "tags": [
                    "Authentication"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "login request body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login response",
                        "schema": {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "description": "logout",
                "operationId": "logout",
                "tags": [
                    "Authentication"
                ],
                "responses": {
                    "200": {
                        "description": "logout response"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "Returns all users",
                "operationId": "getUsers",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "user response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Users"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user.  Duplicate usernames are not allowed",
                "operationId": "addUser",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "user create body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCreate"
                        }
                    }
                ],
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "user response",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "description": "Returns a single user based on id",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of user to fetch",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "user response",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "put": {
                "description": "update a single user based on id",
                "operationId": "updateUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of user to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "user update body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserCreate"
                        }
                    }
                ],
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "user update response",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a single user based on id",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of user to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "User"
                ],
                "responses": {
                    "204": {
                        "description": "user deleted"
                    }
                }
            }
        },
        "/api/users/myself": {
            "get": {
                "description": "Returns user currently logged",
                "operationId": "getMyself",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "user currently logged in",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "put": {
                "description": "update myself",
                "operationId": "updateMyself",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "user update response",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/api/roles": {
            "get": {
                "description": "get all roles",
                "operationId": "getRoles",
                "tags": [
                    "Role"
                ],
                "responses": {
                    "200": {
                        "description": "role response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    }
                }
            }
        },
        "/api/roles/{id}": {
            "get": {
                "description": "get role by id",
                "operationId": "getRoleById",
                "tags": [
                    "Role"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of role to fetch",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "role response",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    }
                }
            }
        },
        "/api/caches": {
            "get": {
                "description": "get all caches",
                "operationId": "getCaches",
                "tags": [
                    "Cache"
                ],
                "responses": {
                    "200": {
                        "description": "cache response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cache"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new cache.",
                "operationId": "addCache",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "cache create body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Cache"
                        }
                    }
                ],
                "tags": [
                    "Cache"
                ],
                "responses": {
                    "200": {
                        "description": "cache response",
                        "schema": {
                            "$ref": "#/definitions/Cache"
                        }
                    }
                }
            }
        },
        "/api/caches/{cacheId}.zip": {
            "get": {
                "description": "get cache zip",
                "operationId": "getCacheZip",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Cache"
                ],
                "parameters": [
                    {
                        "name": "cacheId",
                        "in": "path",
                        "description": "id of cache to fetch",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "minZoom",
                        "in": "query",
                        "description": "minimum zoom level of cache zip",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxZoom",
                        "in": "query",
                        "description": "maximum zoom level of cache zip",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "format of cache export",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "xyz",
                            "tms",
                            "mbtiles",
                            "geopackage"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "export of cache"
                    }
                }
            }
        },
        "/api/caches/{cacheId}/generate": {
            "get": {
                "description": "generate cache zip",
                "operationId": "generateCacheZip",
                "tags": [
                    "Cache"
                ],
                "parameters": [
                    {
                        "name": "cacheId",
                        "in": "path",
                        "description": "id of cache to fetch",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "minZoom",
                        "in": "query",
                        "description": "minimum zoom level of cache zip",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxZoom",
                        "in": "query",
                        "description": "maximum zoom level of cache zip",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "format of cache export",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "xyz",
                            "tms",
                            "mbtiles",
                            "geopackage"
                        ]
                    }
                ],
                "responses": {
                    "202": {
                        "description": "generate request accepted"
                    }
                }
            }
        },
        "/api/caches/{cacheId}/{z}/{x}/{y}.png": {
            "get": {
                "description": "get cache tile",
                "operationId": "getCacheTile",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Cache"
                ],
                "parameters": [
                    {
                        "name": "cacheId",
                        "in": "path",
                        "description": "id of cache to fetch",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "z",
                        "in": "path",
                        "description": "zoom level of tile",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "x",
                        "in": "path",
                        "description": "x of tile",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "y",
                        "in": "path",
                        "description": "y of tile",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "image tile from cache",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Cache"
                            }
                        }
                    }
                }
            }
        },
        "/api/caches/{cacheId}": {
            "delete": {
                "description": "deletes a single cache based on id",
                "operationId": "deleteCache",
                "parameters": [
                    {
                        "name": "cacheId",
                        "in": "path",
                        "description": "id of cache to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Cache"
                ],
                "responses": {
                    "200": {
                        "description": "deleted cache",
                        "schema": {
                            "$ref": "#/definitions/Cache"
                        }
                    }
                }
            }
        },
        "/api/caches/{cacheId}/{format}": {
            "delete": {
                "description": "deletes a single cache format based on id",
                "operationId": "deleteCacheFormat",
                "parameters": [
                    {
                        "name": "cacheId",
                        "in": "path",
                        "description": "id of cache to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "path",
                        "description": "format of cache to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Cache"
                ],
                "responses": {
                    "200": {
                        "description": "deleted cache",
                        "schema": {
                            "$ref": "#/definitions/Cache"
                        }
                    }
                }
            }
        },
        "/api/sources": {
            "get": {
                "description": "get all sources",
                "operationId": "getSources",
                "tags": [
                    "Source"
                ],
                "parameters": [
                    {
                        "name": "url",
                        "in": "query",
                        "description": "url to query for",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "format to query for",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "source response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Source"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new source.",
                "operationId": "addSource",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "cache source body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    }
                ],
                "tags": [
                    "Source"
                ],
                "responses": {
                    "200": {
                        "description": "source response",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    }
                }
            }
        },
        "/api/sources/{sourceId}": {
            "get": {
                "description": "gets a single source based on id",
                "operationId": "getSource",
                "parameters": [
                    {
                        "name": "sourceId",
                        "in": "path",
                        "description": "id of source to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Source"
                ],
                "responses": {
                    "200": {
                        "description": "source",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a single source based on id",
                "operationId": "deleteSource",
                "parameters": [
                    {
                        "name": "sourceId",
                        "in": "path",
                        "description": "id of source to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Source"
                ],
                "responses": {
                    "200": {
                        "description": "deleted source",
                        "schema": {
                            "$ref": "#/definitions/Source"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "LoginRequest": {
            "required": [
                "username",
                "uid",
                "password"
            ],
            "properties": {
                "username": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "LoginResponse": {
            "properties": {
                "token": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/User"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                }
            }
        },
        "Role": {
            "required": [
                "id",
                "name",
                "description",
                "permissions"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UserCreate": {
            "required": [
                "username",
                "firstname",
                "lastname"
            ],
            "properties": {
                "username": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "role": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "passwordConfirm": {
                    "type": "string"
                }
            }
        },
        "User": {
            "required": [
                "id",
                "username",
                "firstname",
                "lastname",
                "active",
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "iconUrl": {
                    "type": "string"
                }
            }
        },
        "Users": {
            "required": [
                "id",
                "username",
                "firstname",
                "lastname",
                "active",
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "role": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                }
            }
        },
        "Source": {
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                }
            }
        },
        "Cache": {
            "required": [
                "id",
                "name",
                "maxZoom",
                "minZoom",
                "date"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "minZoom": {
                    "type": "number"
                },
                "maxZoom": {
                    "type": "number"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "source": {
                    "$ref": "#/definitions/Source"
                }
            }
        }
    }
}