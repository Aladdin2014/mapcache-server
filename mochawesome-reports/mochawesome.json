{
  "reportTitle": "mapcache-server",
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2015-11-19T17:20:12.889Z",
    "end": "2015-11-19T17:20:14.228Z",
    "duration": 1339,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "vectortests",
        "suites": [],
        "tests": [
          {
            "title": "should construct an geojson with a source",
            "fullTitle": "vectortests should construct an geojson with a source",
            "timedOut": false,
            "duration": 1313,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
            "isRoot": false,
            "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
            "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/format/vector_test.js",
        "uuid": "7b272e30-92be-4382-afd6-92dde6fa0995",
        "fullFile": "/data/git/mapcache-server/test/format/vector_test.js",
        "passes": [
          {
            "title": "should construct an geojson with a source",
            "fullTitle": "vectortests should construct an geojson with a source",
            "timedOut": false,
            "duration": 1313,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
            "isRoot": false,
            "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
            "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1313
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "29ee77fa-e61a-44e8-b61b-cb75af7bbf08",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should construct an geojson with a source",
      "fullTitle": "vectortests should construct an geojson with a source",
      "timedOut": false,
      "duration": 1313,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
      "isRoot": false,
      "uuid": "f45eca6e-3fcd-482c-8ddb-d76b63b74b6e",
      "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "vectortests",
        "suites": [],
        "tests": [
          {
            "title": "should construct an geojson with a source",
            "fullTitle": "vectortests should construct an geojson with a source",
            "timedOut": false,
            "duration": 1313,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
            "isRoot": false,
            "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
            "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/format/vector_test.js",
        "uuid": "7b272e30-92be-4382-afd6-92dde6fa0995",
        "fullFile": "/data/git/mapcache-server/test/format/vector_test.js",
        "passes": [
          {
            "title": "should construct an geojson with a source",
            "fullTitle": "vectortests should construct an geojson with a source",
            "timedOut": false,
            "duration": 1313,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
            "isRoot": false,
            "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
            "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1313
      },
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "vectortests",
            "suites": [],
            "tests": [
              {
                "title": "should construct an geojson with a source",
                "fullTitle": "vectortests should construct an geojson with a source",
                "timedOut": false,
                "duration": 1313,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
                "isRoot": false,
                "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
                "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/format/vector_test.js",
            "uuid": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "fullFile": "/data/git/mapcache-server/test/format/vector_test.js",
            "passes": [
              {
                "title": "should construct an geojson with a source",
                "fullTitle": "vectortests should construct an geojson with a source",
                "timedOut": false,
                "duration": 1313,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
                "isRoot": false,
                "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
                "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1313
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "duration": 16,
          "_error": null
        },
        "test": {
          "title": "\"after all\" hook",
          "async": 1,
          "sync": false,
          "_timeout": 2000,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "vectortests",
            "suites": [],
            "tests": [
              {
                "title": "should construct an geojson with a source",
                "fullTitle": "vectortests should construct an geojson with a source",
                "timedOut": false,
                "duration": 1313,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
                "isRoot": false,
                "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
                "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/format/vector_test.js",
            "uuid": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "fullFile": "/data/git/mapcache-server/test/format/vector_test.js",
            "passes": [
              {
                "title": "should construct an geojson with a source",
                "fullTitle": "vectortests should construct an geojson with a source",
                "timedOut": false,
                "duration": 1313,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
                "isRoot": false,
                "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
                "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1313
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "duration": 16,
          "_error": null
        }
      },
      "_events": {},
      "duration": 7,
      "_error": null
    },
    {
      "title": "\"after all\" hook",
      "async": 1,
      "sync": false,
      "_timeout": 2000,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "vectortests",
        "suites": [],
        "tests": [
          {
            "title": "should construct an geojson with a source",
            "fullTitle": "vectortests should construct an geojson with a source",
            "timedOut": false,
            "duration": 1313,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
            "isRoot": false,
            "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
            "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/format/vector_test.js",
        "uuid": "7b272e30-92be-4382-afd6-92dde6fa0995",
        "fullFile": "/data/git/mapcache-server/test/format/vector_test.js",
        "passes": [
          {
            "title": "should construct an geojson with a source",
            "fullTitle": "vectortests should construct an geojson with a source",
            "timedOut": false,
            "duration": 1313,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
            "isRoot": false,
            "uuid": "930e475b-018f-45a0-836c-3eb778d1792a",
            "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1313
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.1]",
        "test": "[Circular ~.allHooks.1]"
      },
      "_events": {},
      "duration": 16,
      "_error": null
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should construct an geojson with a source",
      "fullTitle": "vectortests should construct an geojson with a source",
      "timedOut": false,
      "duration": 1313,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">0</span>);<br><span class=\"hljs-keyword\">async</span>.eachSeries([osm, rivers], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ds, done</span>) </span>{<br>  ds.processSource(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, source</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source'</span>, source);<br>    map.addDataSource(ds);<br>    done();<br>  }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sourceProgress, callback</span>) </span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'source progress'</span>, sourceProgress);<br>    callback(<span class=\"hljs-literal\">null</span>, sourceProgress);<br>  });<br>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>  map.getTile(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {noCache: <span class=\"hljs-literal\">true</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, stream</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (err) {<br>      done(err);<br>      <span class=\"hljs-keyword\">return</span>;<br>    }<br>    <span class=\"hljs-keyword\">var</span> ws = fs.createWriteStream(<span class=\"hljs-string\">'/tmp/vector_test.png'</span>);<br>    stream.pipe(ws);<br>    stream.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<br>      done();<br>    });<br>  });<br>});",
      "isRoot": false,
      "uuid": "d89c5e5b-7e3b-4c7e-9e8b-2edaf166e459",
      "parentUUID": "7b272e30-92be-4382-afd6-92dde6fa0995",
      "skipped": false
    }
  ],
  "allFailures": []
}